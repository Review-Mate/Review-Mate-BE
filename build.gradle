buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.14'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'com.epages.restdocs-api-spec' version '0.16.4'
    id "org.sonarqube" version "4.2.1.3168"
    id "jacoco"
}



group = 'com.somartreview'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}



dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'

    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.8'
    implementation 'org.springframework.retry:spring-retry:1.3.4'
    implementation 'org.springframework:spring-aspects:5.3.30'

    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
    implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'io.rest-assured:rest-assured'
}



def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}



test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}

def sonarqubeProperties = new Properties()
file("src/main/resources/sonarqube.properties").withInputStream { sonarqubeProperties.load(it) }

sonar {
    properties {
        property 'sonar.host.url', sonarqubeProperties.getProperty("host.url")
        property 'sonar.projectKey', sonarqubeProperties.getProperty("projectKey")
        property 'sonar.login', sonarqubeProperties.getProperty("login")
        property 'sonar.sources', sonarqubeProperties.getProperty("sources")
        property 'sonar.language', sonarqubeProperties.getProperty("language")
        property 'sonar.projectVersion', sonarqubeProperties.getProperty("projectVersion")
        property 'sonar.sourceEncoding', sonarqubeProperties.getProperty("sourceEncoding")
        property 'sonar.coverage.jacoco.xmlReportPaths', sonarqubeProperties.getProperty("coverage.jacoco.xmlReportPaths")
        property 'sonar.java.binaries', sonarqubeProperties.getProperty("java.binaries")
        property 'sonar.test.inclusions', sonarqubeProperties.getProperty("test.inclusions")
        property 'sonar.exclusions', sonarqubeProperties.getProperty("exclusions")
    }
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    dependsOn test
    mustRunAfter test

    reports {
        xml.required = true
        csv.required = true
        html.required = true

        xml.destination file("${buildDir}/jacoco/index.xml")
        csv.destination file("${buildDir}/jacoco/index.csv")
        html.destination file("${buildDir}/jacoco/index.html")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/ReviewMateApplication*',
                            '**/*Formatter*',
                            '**/*Interceptor*',
                            '**/config/**',
                            '**/performance/**',
                            '**/BaseEntity*',
                            '**/*Response*',
                            '**/*Request*',
                            '**/domain/**/Q*',
                    ])
                })
        )
    }
}

jacocoTestCoverageVerification {
    mustRunAfter jacocoTestReport

    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }
        }

        rule {
            element = 'METHOD'

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }
        }
    }
}


task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn('test',
            'jacocoTestReport',
            'jacocoTestCoverageVerification')
}