# github repository Actions 페이지에 나타낼 이름
name: Development Automation

# event trigger
on:
  push:
    branches:
      - main
      - release

permissions:
  contents: read

jobs:

####################################################################################################################################
  development-automation-test-server:
    if: contains(github.ref, 'release')
    runs-on: ubuntu-latest
    steps:

    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin' # https://github.com/actions/setup-java

    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    ## create application-test.properties
    - name: make application-test.properties
      run: |
        cd ./src/main/resources
        touch ./application-test.properties
        echo "${{ secrets.PROPERTIES_TEST }}" > ./application-test.properties
      shell: bash

    ## gradle build
    - name: Build with Gradle
      run: ./gradlew build

    ## docker build & push to test
    - name: Docker build & push to test
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-test -t ${{ secrets.DOCKER_REPO_TEST }} .
          docker push ${{ secrets.DOCKER_REPO_TEST }}

    ## deploy to test
    - name: Deploy to test
      uses: appleboy/ssh-action@master
      id: deploy-test
      with:
        host: ${{ secrets.EC2_DOMAIN_TEST }}
        username: ec2-user
        key: ${{ secrets.AWS_PEM_KEY }}
        port: 22
        envs: GITHUB_SHA
        script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO_TEST }}
            docker-compose up -d
            docker image prune -f


####################################################################################################################################
  development-automation-prod-server-1:
    needs: development-automation-test-server
    if: contains(github.ref, 'main')
    runs-on: ubuntu-latest
    steps:

    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin' # https://github.com/actions/setup-java

    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-


    ## create application-prod.properties
    - name: make application-prod.properties
      run: |
          cd ./src/main/resources
          touch ./application-prod.properties
          echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.properties
      shell: bash

    ## gradle build
    - name: Build with Gradle
      run: ./gradlew build

    ## docker build & push to production
    - name: Docker build & push to prod
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_REPO_PROD }} .
          docker push ${{ secrets.DOCKER_REPO_PROD }}

    ## deploy to production AZ 1
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod-az-1
      with:
          host: ${{ secrets.EC2_DOMAIN_PROD_1 }}
          username: ec2-user
          key: ${{ secrets.AWS_PEM_KEY }}
          port: 22
          envs: GITHUB_SHA
          script: |
              docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull ${{ secrets.DOCKER_REPO_PROD }}
              docker-compose up -d
              docker image prune -f


####################################################################################################################################

  development-automation-prod-server-2:
    needs: development-automation-prod-server-1
    if: contains(github.ref, 'main')
    runs-on: ubuntu-latest
    steps:

    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin' # https://github.com/actions/setup-java

    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-


    ## deploy to production AZ 2
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod-az-2
      with:
          host: ${{ secrets.EC2_DOMAIN_PROD_2 }}
          username: ec2-user
          key: ${{ secrets.AWS_PEM_KEY }}
          port: 22
          envs: GITHUB_SHA
          script: |
              docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull ${{ secrets.DOCKER_REPO_PROD }}
              docker-compose up -d
              docker image prune -f

####################################################################################################################################

  ## time
  current-time:
    if: ${{ always() }}
    needs: [development-automation-test-server, development-automation-prod-server-2]
    runs-on: ubuntu-latest
    steps:
      - name: Get Current Time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH:mm:ss
          utcOffset: "+09:00" # 기준이 UTC이기 때문에 한국시간인 KST를 맞추기 위해 +9시간 추가

      - name: Print Current Time
        run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}" # current-time 에서 지정한 포맷대로 현재 시간 출력
        shell: bash

  ## slack
  action-slack:
    needs: current-time
    runs-on: ubuntu-latest
    steps:
        - name: Slack Alarm
          uses: 8398a7/action-slack@v3
          with:
              status: ${{ job.status }}
              author_name: GitHub-Actions development automation
              fields: repo,message,commit,author,ref,job,took
          env:
              SLACK_WEBHOOK_URL: ${{ secrets.SLACK_EC2_DEVELOPMENT_ALARM_WEBHOOK }}
          if: always() # Pick up events even if the job fails or is canceled.
